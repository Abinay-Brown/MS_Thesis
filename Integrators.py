import numpy as np


        
def rk4_step(f, t, state, dt, control):
    k1 = f(t, state, control)
    k2 = f(t + 0.5 * dt, state + 0.5 * dt * k1, control)
    k3 = f(t + 0.5 * dt, state + 0.5 * dt * k2, control)
    k4 = f(t + dt, state + dt * k3, control)
    return state + (dt / 6) * (k1 + 2 * k2 + 2 * k3 + k4)

def rk8_step(f, t, state, dt, control):
    # RK8 coefficients
    a = np.array([0, 1/18, 1/12, 1/8, 5/16, 3/8, 59/400, 93/200, 
                  5490023248/9719169821, 13/20, 1201146811/1299019798, 1])
    
    b_coeffs = [
        [0],
        [1/18],
        [1/48, 1/16],
        [1/32, 0, 3/32],
        [5/16, 0, -75/64, 75/64],
        [3/80, 0, 0, 3/16, 3/20],
        [29443841/614563906, 0, 0, 77736538/692538347, -28693883/1125000000, 23124283/1800000000],
        [16016141/946692911, 0, 0, 61564180/158732637, 22789713/633445777, 545815736/2771057229, -180193667/1043307555],
        [39632708/573591083, 0, 0, -433636366/683701615, -421739975/2616292301, 100302831/723423059, 790204164/839813087, 800635310/3783071287],
        [246121993/1340847787, 0, 0, -37695042795/15268766246, -309121744/1061227803, -12992083/490766935, 6005943493/2108947869, 393006217/1396673457, 123872331/1001029789],
        [-1028468189/846180014, 0, 0, 8478235783/508512852, 1311729495/1432422823, -10304129995/1701304382, -48777925059/3047939560, 15336726248/1032824649, -45442868181/3398467696, 3065993473/597172653],
        [185892177/718116043, 0, 0, -3185094517/667107341, -477755414/1098053517, -703635378/230739211, 5731566787/1027545527, 5232866602/850066563, -4093664535/808688257, 3962137247/1805957418, 65686358/487910083]
        ]
    c= np.array([14005451/335480064, 0, 0, 0, 0, -59238493/1068277825, 181606767/758867731,
                 561292985/797845732, -1041891430/1371343529, 760417239/1151165299, 118820643/751138087, -528747749/2220607170, 1/4])
        
    k = np.zeros((12, state.shape[0]))
        
    # Compute RK8 stages
    for i in range(12):
        ti = t + a[i] * dt
        yi = state + dt * sum(b_coeffs[i][j] * k[j] for j in range(len(b_coeffs[i])))
        k[i] = f(ti, yi, control)
    
    y_next = state + dt * sum(c[i] * k[i] for i in range(12))
    return y_next
